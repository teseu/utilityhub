---
import Logo from './icons/logo.astro';
const apiUrl = import.meta.env.PUBLIC_API_URL;
const siteUrl = import.meta.env.PUBLIC_SITE_URL;

// Dados fallback para caso a requisição falhe
const fallbackData = {
  aggregator: {
    name: "UtilityHub",
    url: "/",
    description: "A collection of tools to make your life easier."
  },
  company: [
    { name: "About", url: "/about" },
    { name: "Contact", url: "/contact" }
  ],
  legal: [
    { name: "Privacy Policy", url: "/privacy" },
    { name: "Terms of Service", url: "/terms" },
    { name: "Cookie Policy", url: "/cookie" }
  ],
  apps: [
    {
      "name": "Password Generator",
      "url": "/password"
    },
    {
      "name": "Border Radius Tool",
      "url": "/border-radius"
    },
    {
      "name": "Cool names",
      "url": "/cool-name"
    },
    {
      "name": "Random Draw",
      "url": "/randorax"
    },
    {
      "name": "Color Palette",
      "url": "/color-palette"
    }
  ]
};

let footerData;
try {
  // Durante o build, usa os dados fallback diretamente
  if (import.meta.env.SSR) {
    footerData = fallbackData;
  } else {
    const response = await fetch(`${apiUrl}/data/footer-metadata.json`);
    footerData = await response.json();
  }
} catch (error) {
  console.warn('Falha ao carregar footer-metadata.json, usando dados fallback');
  footerData = fallbackData;
}

const { aggregator, apps, company, legal } = footerData;

// Função helper para processar URLs
const getUrl = (url: string) => {
  if (url.startsWith('http')) return url; // URLs externas ficam absolutas
  return url.startsWith('/') ? url : `/${url}`; // URLs internas ficam relativas
};

// Processar as URLs dos links - apps mantém apenas o caminho relativo
const processedApps = apps.map((app: { name: string; url: string }) => ({
  ...app,
  url: getUrl(app.url) // Remove a concatenação com siteUrl
}));

const processedCompany = company.map((page: { name: string; url: string }) => ({
  ...page,
  url: getUrl(page.url)
}));

const processedLegal = legal.map((page: { name: string; url: string }) => ({
  ...page,
  url: getUrl(page.url)
}));

const processedAggregator = {
  ...aggregator,
  url: getUrl(aggregator.url)
};
---

<div>
  <footer class="footer sm:footer-horizontal bg-base-200 text-base-content p-10">
    <nav>
      <div class="footer-title">Apps</div>
      <ul>
      {processedApps.map((app: { name: string; url: string }) => (
        <li>
          <a class="link link-hover" href={app.url}>{app.name}</a>
        </li>
      ))}
      </ul>
    </nav>
    <nav>
      <div class="footer-title">Company</div>
      <ul>
      {processedCompany.map((page: { name: string; url: string }) => (
        <li>
          <a class="link link-hover" href={page.url}>{page.name}</a>
        </li>
      ))}
      </ul>
    </nav>
    <nav>
      <div class="footer-title">Legal</div>
      <ul>
      {processedLegal.map((page: { name: string; url: string }) => (
        <li>
          <a class="link link-hover" href={page.url}>{page.name}</a>
        </li>
      ))}
      </ul>
    </nav>
  </footer>
  <footer class="footer bg-base-200 text-base-content border-base-300 border-t px-10 py-4">
    <aside class="grid-flow-col items-center">
      <Logo />
      <div>
        <a class="link link-hover" href={processedAggregator.url}>{processedAggregator.name}</a>
        <div>{processedAggregator.description}</div>
      </div>
    </aside>
    
  </footer>
</div>

<style is:global>
  .logo__footer {
  width: 2rem;
  height: 2rem;
  display: flex;
}
</style>